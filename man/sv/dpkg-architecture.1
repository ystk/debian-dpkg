.\" dpkg manual page - dpkg-architecture(1)
.\"
.\" Copyright Â© 2005 Marcus Brinkmann <brinkmd@debian.org>
.\" Copyright Â© 2005 Scott James Remnant <scott@netsplit.com>
.\" Copyright Â© 2006-2013 Guillem Jover <guillem@debian.org>
.\" Copyright Â© 2009-2012 RaphaÃ«l Hertzog <hertzog@debian.org>
.\"
.\" This is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <https://www.gnu.org/licenses/>.
.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH dpkg\-architecture 1 2013\-03\-28 Debianprojektet dpkg\-verktygen
.SH NAMN
dpkg\-architecture \- ställ in och bestäm arkitektur för paket som byggs
.
.SH SYNOPS
\fBdpkg\-architecture\fP [\fIflagga\fP...] [\fIåtgärd\fP]
.PP
.
.SH BESKRIVNING
\fBdpkg\-architecture\fP innehåller en funktion för att bestämma och ställa in
bygg\- och värdarkitekturerna för att bygga paket.
.PP
Byggarkitekturen bestäms alltid av ett externt anrop till \fBdpkg\fP(1) och kan
inte ställas in på kommandoraden.
.PP
Du kan ange värdarkitektur genom att ange en av, eller båda, flaggorna \fB\-a\fP
och \fB\-t\fP. Förvalet bestäms av ett externt anrop till \fBgcc\fP(1), eller är
detsamma som byggarkitekturen varken \fBCC\fP eller gcc är tillgängliga. Det
räcker att ange en av \fB\-a\fP och \fB\-t\fP, värdet på den andra kommer ställas in
till ett fungerande förval. Det är faktiskt oftast bättre att bara ange den
ena eftersom \fBdpkg\-architecture\fP kommer varna dig om ditt val inte
överensstämmer med förvalet.
.
.SH KOMMANDON
.TP 
\fB\-l\fP
Skriv miljövariabler, en per rad, på formatet \fIVARIABEL=värde\fP. Detta är
förvald åtgärd.
.TP 
\fB\-e\fP\fIdebianarkitektur\fP
Kontrollera arkitektur för likhet (sedan dpkg 1.13.13). Som standard jämförs
\fIdebianarkitektur\fP mot den aktuella Debianarkitekturen, som är
värd. Åtgärden expanderar inte jokertecken i arkitekturer. Kommandet
avslutar med status 0 om det är en träff, 1 om det inte är en träff.

.TP 
\fB\-i\fP\fIarkitektursökmönster\fP
Kontrollera identitet på arkitekturen genom att expandera
\fIarkitektursökmönster\fP som ett arkitektursökmönster med jokertecken, och
jämföra med den aktuella Debianarkitekturen (sedan dpkg 1.13.13). Kommandot
avslutas med status 0 vid träff, 1 om inte träff.
.TP 
\fB\-q\fP\fIvariabelnamn\fP
Skriv värdet på en enkel variabel.
.TP 
\fB\-s\fP
Visar ett exportkommando. Detta kan användas för att sätta miljövariabler
med eval.
.TP 
\fB\-u\fP
Visar ett kommando liknande \fB\-s\fP som för att nollställa alla variabler.
.TP 
\fB\-c\fP\fI kommando\fP
Exekvera ett \fIkommando\fP i en miljö som har alla variabler satta till det
bestämda värdet.
.TP 
\fB\-L\fP
Visa en lista över giltiga arkitekturnamn.
.TP 
\fB\-?\fP, \fB\-\-help\fP
Visar hjälpskärm och avslutar.
.TP 
\fB\-\-version\fP
Visar version och avslutar.
.
.SH FLAGGOR
.TP 
\fB\-a\fP\fIdebianarkitektur\fP
Välj Debianarkitektur.
.TP 
\fB\-t\fP\fIgnu\-systemtyp\fP
Välj GNU\-systemtyp.
.TP 
\fB\-f\fP
Värden som sätts av befintliga miljövariabler med samma namn som de som
används av skriptet används (t.ex av \fBdpkg\-architecture\fP), såvida inte
denna tvingande flagga anges. Det gör det möjligt för användaren att
överstyra ett värde även om anropet till \fBdpkg\-architecture\fP är begravt
djupt inuti ett annat skript (till exempel \fBdpkg\-buildpackage\fP(1)).
.
.SH TERMINOLOGI
.IP byggmaskin 4
Maskinen paketet byggs på.
.IP värdmaskin 4
Maskinen paketet byggs för.
.IP Debianarkitektur 4
Debianarkitektursträngen, vilken anger binärträdet i FTP\-arkivet. Exempel:
i386, sparc, hurd\-i386.
.IP arkitektursökmönster 4
Ett arkitektursökmönster är en speciell arkitektursträng som matchar alla
äkta arkitekturer som finns i den. Den genella formen är
<kärna>\-<cpu>. Exempel: linux\-any, any\-i386, hurd\-any.
.IP GNU\-systemtyp 4
En arkitekturspecificeringssträng består av två delar, avdelade med
bindestreck: processor och system. Exempel: i386\-linux\-gnu, sparc\-linux\-gnu,
i386\-gnu, x86_64\-netbsd.
.
.SH VARIABLER
Följande variabler sätts av \fBdpkg\-architecture\fP:
.IP \fBDEB_BUILD_ARCH\fP 4
Debianarkitekturen för byggmaskinen.
.IP \fBDEB_BUILD_ARCH_OS\fP 4
Debiansystemnamnet på byggmaskinen (sedan dpkg 1.13.2).
.IP \fBDEB_BUILD_ARCH_CPU\fP 4
Debian\-processornamnet för byggmaskinen (sedan dpkg 1.13.).
.IP \fBDEB_BUILD_ARCH_BITS\fP 4
Pekarstorleken för byggmaskinen (i bitar; sedan dpkg 1.15.4).
.IP \fBDEB_BUILD_ARCH_ENDIAN\fP 4
Endian för byggmaskinen (little / big; sedan dpkg 1.15.4).
.IP \fBDEB_BUILD_GNU_CPU\fP 4
CPU\-delen av \fBDEB_BUILD_GNU_TYPE\fP.
.IP \fBDEB_BUILD_GNU_SYSTEM\fP 4
Systemdelen av \fBDEB_BUILD_GNU_TYPE\fP.
.IP \fBDEB_BUILD_GNU_TYPE\fP 4
GNU\-systemtypen för byggmaskinen.
.IP \fBDEB_BUILD_MULTIARCH\fP 4
Den förtydligade GNU\-systemtypen för byggmaskinen, används för sökvägar i
filsystemet.
.IP \fBDEB_HOST_ARCH\fP 4
Debianarkitekturen för värdmaskinen.
.IP \fBDEB_HOST_ARCH_OS\fP 4
Debiansystemnamnet för värdmaskinen (sedan dpkg 1.13.2).
.IP \fBDEB_HOST_ARCH_CPU\fP 4
Debian\-processornamnet för värdmaskinen (sedan dpkg 1.13.2).
.IP \fBDEB_HOST_ARCH_BITS\fP 4
Pekarstorleken för värdmaskinen (i bitar; sedan dpkg 1.15.4).
.IP \fBDEB_HOST_ARCH_ENDIAN\fP 4
Endian för värdmaskinen (little / big; sedan dpkg 1.15.4).
.IP \fBDEB_HOST_GNU_CPU\fP 4
\s-1CPU\s0\-delen av \fBDEB_HOST_GNU_TYPE\fP.
.IP \fBDEB_HOST_GNU_SYSTEM\fP 4
Systemdelen av \fBDEB_HOST_GNU_TYPE\fP.
.IP \fBDEB_HOST_GNU_TYPE\fP 4
GNU\-systemtypen för värdmaskinen.
.IP \fBDEB_HOST_MULTIARCH\fP 4
Den förtydligade GNU\-systemtypen för värdmaskinen, används för sökvägar i
filsystemet.
.
.SH FILER
.SS Arkitekturtabeller
Alla dessa filer måste finnas för att \fBdpkg\-architecture\fP måste
finnas. Deras placering kan överstyras vid körning med miljövariabeln
\fBDPKG_DATADIR\fP.
.TP 
\fI/usr/share/dpkg/cputable\fP
Tabell över kända processornamn och deras motsvarande GNU\-namn.
.TP 
\fI/usr/share/dpkg/ostable\fP
Tabell över kända operativsystemsnamn och deras motsvarande GNU\-namn.
.TP 
\fI/usr/share/dpkg/triplettable\fP
Tabell över Debianarkitekturtripplar och deras motsvarande
Debianarkitekturnamn.
.SS Paketeringsstöd
.TP 
\fI/usr/share/dpkg/architecture.mk\fP
Makefile\-utklipp som sätter alla variabler \fBdpkg\-architecture\fP skriver
(sedan dpkg 1.16.1):
.
.SH EXEMPEL
\fBdpkg\-architecture\fP godtar flaggan \fB\-a\fP och sänder den vidare till
\fBdpkg\-architecture\fP. Andra exempel:
.IP
CC=i386\-gnu\-gcc dpkg\-architecture \-c debian/rules build
.IP
eval \`dpkg\-architecture \-u\`
.PP
Kontrollera om en arkitektur är samma som den nuvarande eller en given:
.IP
dpkg\-architecture \-elinux\-alpha
.IP
dpkg\-architecture \-amips \-elinux\-mips
.PP
Se om den aktuella arkitekturen eller en arkitektur som anges med \fB\-a\fP är
ett Linuxsystem:
.IP
dpkg\-architecture \-ilinux\-any
.IP
dpkg\-architecture \-ai386 \-ilinux\-any
.
.SS "Använda i debian/rules"
Miljövariablerna som sätts av \fBdpkg\-architecture\fP sänds till
\fIdebian/rules\fP som make\-variabler (se dokumentationen för make). Du bör
dock inte bero på dem eftersom detta förhindrar manuella anrop till
skriptet. Du bör istället alltid initiera dem med \fBdpkg\-architecture\fP med
\fB\-q\fP\-flaggan. Här är några exempel, vilka även visar hur du kan förbättra
stödet för korskompilering i ditt paket:
.PP
Hämta GNU\-systemtypen och vidaresänd den till ./configure:
.PP
.RS 4
.nf
DEB_BUILD_GNU_TYPE ?= $(shell dpkg\-architecture \-qDEB_BUILD_GNU_TYPE)
DEB_HOST_GNU_TYPE ?= $(shell dpkg\-architecture \-qDEB_HOST_GNU_TYPE)
[...]
ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
  confflags += \-\-build=$(DEB_HOST_GNU_TYPE)
else
  confflags += \-\-build=$(DEB_BUILD_GNU_TYPE) \e
               \-\-host=$(DEB_HOST_GNU_TYPE)
endif
[...]
\&./configure $(confflags)
.fi
.RE
.PP
Gör något endast för en specifik arkitektur:
.PP
.RS 4
.nf
DEB_HOST_ARCH ?= $(shell dpkg\-architecture \-qDEB_HOST_ARCH)

ifeq ($(DEB_HOST_ARCH),alpha)
  [...]
endif
.fi
.RE
.PP
eller, om du bara vill testa på processor\- eller OS\-typ, använd variablerna
\fBDEB_HOST_ARCH_CPU\fP eller \fBDEB_HOST_ARCH_OS\fP.
.PP
Observera att du även kan bero på att ett externt Makefile\-utklipp sätter
alla variabler \fBdpkg\-architecture\fP kan tillhandahålla:
.PP
.RS 4
.nf
include /usr/share/dpkg/architecture.mk

ifeq ($(DEB_HOST_ARCH),alpha)
  [...]
endif
.fi
.RE
.PP
Oavsett bör du aldrig använda \fBdpkg \-\-print\-architecture\fP för att hämta
arkitekturinformation när paketet byggs.
.
.SH "SE ÄVEN"
\fBdpkg\-buildpackage\fP(1), \fBdpkg\-cross\fP(1).
.SH ÖVERSÄTTNING
Peter Krefting och Daniel Nylander.
